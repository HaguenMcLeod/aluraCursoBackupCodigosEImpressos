


Comandos no Terminal do Ubuntu -> Ctrl + Alt + Enter
1 - Identificar diretório corrente -> pwd
2 - Lista arquivos e diretórios -> ls
3 - Informa ao terminal para mostrar uma msg -> echo Bem Vindo
4 - Setas do teclado para navegar por comandos já incluídos no terminal
5 - Cria arquivo com msg passada pelo terminal -> echo "Bem Vindo" > bemVindo.txt
6 - Ler o arquivo criado via terminal, o terinal tem que estar aberto na posta aonde o arquivo foi criado - > cat bemVindo.txt
7 - Tecla Tab completa comandos parcialmente inseridos no terminal
8 - Limpa a tela do terminal -> clear
9 - Lista informações sobre conteúdo de diretórios -> ls -l
10 - Lista informações sobre conteúdo de diretórios, inclusive ocultos -> ls -la
11 - Comando que retorna ajuda sobre outros comandos -> man comando
12 - Mostra no terminal o nome do usuário -> whoami
13 - Mostra conteúdo do arquivo com os números das linhas -> cat bemVindo.txt -n
14 - Adicionar nova linha ao arquivo txt sem sobrescrever, utilizar duas ">>" -> echo "segunda string dentro do arquivo" >> bemVindo.txt
15 - para entrar no diretório -> cd diretorio, para voltar ao diretório anterior cd ..
16 - criar diretório -> mkdir diretorio
17 - voltar para o diretório original do usuário -> cd
18 - voltar para o diretório original do usuário -> /
19 - Remover pasta -> rmdir pasta
20 - Apagar arquivo -> rm arquivo.txt
21 - Ler conteúdo de todos os arquivos na pasta -> car arquivo?.txt
22- Ler conteúdo de todos os arquivos na pasta com qualquer caractere no final-> car arquivo*.txt
23 - Apagar diretório e seu conteúdo -> rm -r diretorio
24 - Copiar arquivo -> cp arquivo destino
25 - Renomear arquivo -> mv arquivo.txt arquivo2.txt
26 - Mover arquivo para outra pasta -> mv arquivo.txt pasta/nome do arquivo ou novo nome
27 - Copiar diretórios -> cp -r origem destino
28 - Arquivos .zip compactar-> zip -r arquivo.zip pasta/
29 - Ver conteúdo arquivo .zip -> unzip -l pasta.zip
30 - Descompactar -> unzip pasta.zip
31 - Descompactar com menos dados exibidos no console -> unzip -q pasta.zip
32 - Compactar com menos dados exibidos no console -> zip -rq pasta.zip pasta
33 - compactar com arquivos .tar -> tar -cz pasta > pasta.tar.gz
34 - descompactar arquivo .tar -> tar -xz < pasta.tar.gz
35 - compactar com .tar sem redirecionamento -> tar -czf pasta.tar.gz pasta/
36 - descompactar com .tar sem redirecionamento -> tar -xzf pasta.tar.gz
37 - compactar com .tar mostrnaod log -> tar -vxzf pasta.tar.gz

tar -czf work.tar.gz workspace/ -->> O parâmetro -c indica ao comando tar que desejamos criar um novo arquivo.

O comando tar apenas empacota vários arquivos em um único arquivo, sem realizar compactação, e por isso passamos o parâmetro -z para indicar que queremos, além de criar um único arquivo, realizar um processo de compactação utilizando o formato .gz. Quando compactamos podemos reduzir o tamanho.

O parâmetro -f indica que compactaremos para um arquivo.

38 - editor de arquivos via terminal -> vi arquivo.txt
navegação via setas do teclado
39 - inserir conteúdo -> teclar "i" e digitar
40 - sair da edição teclar esc
41 - salvar -> :w + enter
42 - :q + enter para sair
43 - inserir texto na posição seguinte -> teclar "a" e digitar
44 - para remover caracteres -> "x"
45 - remover string -> digitar o numero da caracteres a serem removidos + "x"
46 - sair salvando -> :wq
47 - remover linha inteira -> dd
48 - sair sem salvar -> :q!
49 - adicionar no final da linha -> "A"
50 - avançar para ultima linha -> Shift + g
51 - avançar para linha n -> numero da linha + Shift + g
52 - ir ao final da linha -> $
53 - ir ao inicio da linha -> 0
54 - procurar por palavra -> /palavra
55 - avançar pelas palavras encontradas -> "n"
56 - ultima linha do arquivo -> G(Shift + g)
57 - Primeira linha do arquivo -> 1G (Shift + g)
58 - copiar linha -> yy
59 - colar linha -> p
60 - copiar x linhas -> xyy
61 - colar linha copiada x vezes -> xp

Nivel 2 do curso ###############################

62 - lista todos os processos rodando -> ps -e
63 - parar processo rodando -> kill + numero do processo rodando visto no comando anterior
64 - parar processo "na marra" -> kill -9 + numero do processo
65 - lista processos rodando com detalhes -> ps -ef
66 - lista detalhes de um processo especifico rodando -> ps -ef | grep firefox
67 - lista linhas que contenham um termo dentro de um arquivo -> cat arquivo.txt | grep termoProcurado
68 - lista % de uso do sistema e memoria pelos processo -> top
69 - identificar qtos processos com um comando determinado nome estao carregados -> ps -ef | grep processo
70 - matar mais de um processo -> kill -9 numeros do processos
71 - matar toas as instancias de um processo -> killall processo ou killall -9 processo
72 - listar processos de um usuário -> top -u lucas
73 - listar andamento de processo especifico -> top -p numero do processo
74 - Mudar o delay em que o Top atualiza as informações -> d + enter
75 - Abrir processo pelo terminal -> processo + enter -> firefox + enter -> o terminal que abriu o processo fica travado com processo que foi aberto
76 - Ver arvore de processos -> pstree
77 - Parar o processo -> ctrl + z
78 - Ver jobs associados ao processo parado -> jobs
79 - Reiniciar o processo e joga-lo para o background -> bg 1 (ou numero do processo listado, se nada informado vai executar o primeiro) -> Pressionar Ctrl + z e executar o comando $ bg 
80 - Trazer o processo de volta para o terminal -> fg 1
81 - Firefox & -> o & indica execução no background
82 - Abrir processo direto no background -> processo &
83 - criar programas no terminal -> sh "arquivo com os comandos", pode ser um arquivo texto como o a seguir escrito no gedit:

echo "Vou dormir"
sleep 5
echo "Terminei de dormir"

84 - descobrir usuário atual acessando arquivo -> whoami
85 - permissões de arquivos -> r - leitura, w - escrita, x execução, d - diretório
86 - mudar permissão para permitir execução de arquivo -> chmod +x arquivo
87 - agora para executar o arquivo, do item 83, nao precisa mais do comando sh e sim de ./arquivo
88 - para tirar a permissão -> chmod -x arquivo
89 - O "~" em ~/workspace/ é um atalho para representar o diretório do usuário
90 - Listar permissões de arquivo -> ls -1 arquivo
91 - localizar um arquivo no hd -> locate arquivo -> e atualizado de tempo em tempo pelo sistema
92 - atualizar db interno de índice do ubuntu para pesquisar por arquivos recentes -> sudo update db
93 - localizar o executável de um arquivo -> which arquivo
94 - trocar senha do usuário corrente -> passwd
95 - trocar senha do usuário root -> sudo passwd 
96 - logar como root -> su root
97 - logar como outro usuário -> su outro usuario
98 - criar novo usuário -> sudo adduser jose
99 - trocar usuário -> su nome do usuario
100 - logar como root -> su root ou somente su
OBS.: Usuário root pode logar como outro usuário sem necessidade de senha
101 - Tirar permissão de acesso de outros usuários a pasta de um usuário -> chmod o-rx usuario -> retira permissão para leitura e execução
102 - Tirar permissão do próprio usuário -> chmod u-rx
103 - Tirar permissão do grupo -> chmod g-rx
104 - Visualizar variáveis de ambiente -> env
105 - Visualizar variáveis aonde os comandos são executados -> env | grep PATH
106 - Adicionar diretório ao PATH para poder executar comandos -> PATH=$PATH:/home/usuario/pasta que contem o arquivo a ser executado -> execução de script -> essa configuração só funciona enquanto o terminal estiver aberto
107 - Para configurar o PATH para perdurar mesmo com o fechamento do terminal -> sudo gedit .bashrc & -> vai abrir no bloco de notas -> adicionar no final -> PATH=&$PATH:/home/usuario/pasta com o script a ser executado
108 - O comando wc pode ser utilizado para contar o número de palavras, caracteres e linhas que um arquivo possui. Junto com o wc podemos utilizar a opção -w para indicar que desejamos contar apenas o número de palavras que existem no arquivo. O *.txt indica que desejamos realizar a contagem em todos os arquivos .txt do nosso diretório atual.
109 - wc pode também contar o número de caracteres e linhas em um arquivo, ou em uma saída do terminal. Para isso, podemos utilizar a opção -c para caracteres e -l para linhas.
110 - Conta quantos processos estão rodando -> ps -e | wc -l
111 - Modificar variável que o console exibe com informações sobre o usuário ao lado do prompt -> echo $PS1
112 - Instalar programas atualizando primeiro a lista de repositórios -> sudo apt-get update
113 - Buscar programa em servidor ftp -> apt-cache search vsftp
114 - Instalar o programa buscado -> sudo apt-get install programa -> no caso será instalado o servidor ftp "vsftp"
115 - Subir o servidor -> ftp localhost
116 - Desinstalar programa -> sudo apt-get remove programa - no caso o vsftp
117 -     apt-get install: instala um programa dado o nome
          apt-get remove: desinstala um programa dado o nome
          apt-get update: busca uma lista das versões atualizadas dos programas
          apt-cache search: procura os programas disponíveis para instalação  
118 - Instalar programas fora da central de programas do Ubuntu -> arquivos .deb -> baixar a versão .deb do programa a ser instalado -> abrir o terminal na pasta aonde o programa foi baixado -> sudo dpkg -i programa.deb -> exemplo -> $ sudo dpkg -i google-chrome-stable_current_amd64.deb
119 - Desinstalar programa .deb -> sudo dpkg -r programa -> exemplo(s) -> $ sudo dpkg -r google-chrome-stable ou $ sudo apt-get remove google-chrome-stable
120 - Verificar se serviço esta rodando -> ps -ef | grep serviço ou -> $ sudo service serviço status
121 - Para o serviço sem forçar a parada -> sudo service serviço stop
122 - Reiniciar o serviço -> sudo service serviço start -> Os scripts dentro do diretório /etc/init.d são os programas que são executados no startup da máquina.
123 - Instalação a partir de código fonte -> Baixar o código fonte .tar.gz -> abrir terminal aonde o arquivo foi salvo -> tar zxf arquivo.tar.gz -> entrar no diretório criado após a descompactação -> o arquivo tar.gz é mais vantajoso que o .zip pois mantém as permissões de execução -> antes do iniciar a instalação, verificar se o arquivo está integro e com todas as dependências, se estiver presente, executar ./configure (dentro da pasta criada após a descompactação) -> buildar através do comando make -> pode acontecer de faltar uma ou mais bibliotecas -> se sim -> buscar a dependência que faltou -> apt-cache search biblioteca | grep dev -> sudo apt-get install biblioteca(do ambiente de desenvolvimento) -> executar "make" novamente agora com a bilbioteca faltante instalada -> depois executar "sudo make install"
124 - Acesso a servidor remoto -> logar -> sudo apt-get install ssh-client (para efetuar conexões) ou sudo apt-get install ssh-server (para receber conexões) ou para efetuar as duas operações -> sudo apt-get install ssh -> testar se funcionou logando -> ssh usuario@localhost (sem modo grafico, não executa o forefox, por exemplo)
125 - sair do ssh -> exit
126 - logar com modo grafico -> ssh -x usuario@localhost 
127 - se travar o terminal -> crtl + c
128 - copiar arquivo de maquina local para remota -> scp arquivo.zip usuario@localhost:/home/pasta do usuario ou scp arquivo.zip usuario@localhost:~/
129 - copiar de maneira recursiva -> scp -r

Modulo 3 ##########################################################################################

130 - CVS, SVN, Mercurial, Git - Opções de controle de versão
131 - Repositórios distribuídos - Isso permite o trabalho de modo offline, antes da comunicação com outro servidor para que o envio de versões
132 - Instalar GIT via central de pacotes, marcar opções padrão ao instalar ou via comando -> sudo apt-get install git
133 - GIT Bash - Equivalente ao Terminal do Ubuntu, os comandos podem ser executados no terminal do ubuntu
134 - Conferir instalação git --version, para o curso serve qualquer versão
135 - Criar um repositorio git -> git init
136 - Status do repositório criado -> git status
137 - Adicionar arquivo para monitoração do git -> git add arquivo -> git status para conferir
138 - Para monitorar todos os arquivos da pasta -> git add.
135 - Remover arquivo da monitoração -> git rm arquivo
136 - Salvar alterações feitas com checkpoint (commit) ->  git commit -m "descricao do commit 001" - ATENÇÃO - Pode dar erro ao salvar, ver item 137 abaixo
137 - Se der erro para salvar as alterações do passo 136 executar os comandos descritos abaixo:

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.
138 - Salvar arquivo que foi modificado -> git init se o monitoramento já não estiver ativo -> git add arquivo -> git commit -m "descricao do commit apos modificacao do arquivo "
139 - Ver histórico de commits dentro da pasta monitorada -> git log
140 - Configurar configurarções -> git config --local ou para a máquina toda -> git config --global -> exemplo para setar nome do usuário -> git config --local user.name "Vinicius Dias"
141 - Visualizar as configurações salvas por meio de git config user.name, ou git config user.email
142 - Visualizar resumo de commits -> git log --oneline
143 - Log com mais informações -> git log -p
144 - Log apenas com o hash -> git log --pretty="format:%H
145 - Log com hash e mensagem de commit -> git log --pretty="format:%h %s
146 - Link com outras opções para exibição de log -> https://devhints.io/git-log
147 - Ignorar arquivos na monitoração -> arquivo specífico do git -> .gitignore -> lista arquivos a serem ignorados -> é necessário adicionar ao git para poder listar os arquivos a serem ignorados -> git commit -m "Adicionando .gitignore
148 - Sugestão para nunca commitar um código que ainda não funciona seja por erro ou por não estar pronto
149 - Repositório Remoto 
-> criar uma pasta no mesmo nível da pasta que será monitorada 
-> entrar nesta pasta e digitar 
-> git init -- bare 
-> "--bare" significa que esta pasta só vai conter as alterações dos arquivos e não uma cópia de cada arquivo 
-> no console será exibido o caminho aonde esta pasta está versionada, copiar esse endereço 
-> voltar pelo console para a pasta que efetivamente contém os arquivos 
-> git remote -> para listar todos os repositorios remotos disponiveis 
-> até então não haverá nenhum 
-> para criar o primeiro servidor local 
-> git remote add "nome do servidor" "caminho da pasta que contém o servidor copiado anteriormente", exemplo -> /home/05329594774/Downloads/pastaServidor 
-> ATENÇÃO - o caminho pode ser qualquer coisa, uma url, caminho de pasta e etc... 
-> para confirmar se o servidor foi criado 
-> "git remote" e o nome do servidor deve aparecer
150 - Para veficar o endereço do servidor -> git remote -v
151 - fetch (envio) / push (busca)
152 - baixar arquivos do servidor para uma nova pasta 
-> clonar repositorio 
-> git clone /c/Users/"resto do caminho de pastas até a pasta do servidor" novo nome da pasta que será criada com a clonagem 
-> até esse ponto a clonagem trará um arquivo vazio, no itens abaixo será mostrado como passar esse conteúdo
153 - Sincronizando os dados de origem com o servidor remoto -> 
entrar na pasta que compartilhará dados e digitar -> 
git remote -> 
o retorno precisa conter "local ou servidor001(criado na maquina Serpro)" que é a pasta contida dentro da pasta "servidor" -> 
depois, digitar -> 
git push local master (precisa commitar antes)-> 
local é o repositório sendo monitorado e master é o branch -> 
o usuário X acaba de enviar dados para o servidor, agora o usuário Y precisa buscar esses dados para o seu repositório -> 
"git remote" nesse momento, logado como usuário Y, vai retornar "origin", que pode ser renomeado -> 
git remote rename origin local -> 
git remote agora deve retornar "local" -> 
git pull local master -> 
tras do repositório local para o branch "master" -> 
ls agora deve retornar "index.html" -> 
modificar o arquivo index.html agora criado para testar a modificação -> 
git status deve retornar que houve modificação -> agora é preciso commitar o arquivo alterado -> 
git add index.html -> 
git commit -m "index html com conteudo modificado" -> 
agora é preciso enviar os dados para o servidor -> 
"git push local master" para que outro usuário possa ver -> 
logar como usuário X -> 
git status mostrará que não ha nada para commitar -> 
Porém ha dados para trazer e sincronizar (foi avisado pelo outro usuário "verbalmente") -> 
git pull local master -> 
será mostrado que houve modificação -> 
git log -p para mostrar a modificação -> 
dessa forma o uauário X sobrescreveu seus dados com os dados do usuário Y

Acima já impresso #############################################################

14/10/2019 - ##################################################################
06 GitHub

Site GitHub -> https://github.com/
-> Criar repositório -> clicar no sinal de "+" no canto superior direito da tela
-> Atribuir nome ao repositório
-> Atribuir descrição ao repositório
-> Informar se o diretório será Publico ou Privado -> para Privado 
normalmente são contas pagas
-> Clicar em criar repositório -> será exibida a tela inicial e ############### 
texto com sugestão para criação gestão de versões -> ##########################
*******************************************************************************
…or create a new repository on the command line

echo "# alura-git" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/HaguenMcLeod/alura-git.git
git push -u origin master

…or push an existing repository from the command line

git remote add origin https://github.com/HaguenMcLeod/alura-git.git
git push -u origin master
*******************************************************************************
-> Se não estiver selecionado, clicar no botão HTTPS na #######################
 barra de endereços dentro da página do git ###################################
 dessa forma sempre será necessário informar senha ############################
para trafegar dados ########################################################### 
-> Abrir console aonde um repositório possa ser criado, copiar da página ###### 
do git o ###################################################################### 
comando "git remote add origin https://github.com/HaguenMcLeod/alura-git.git" #
e colar no console 
-> Enviar os dados do repositório -> git push -u origin master -> "-u" significa que sempre será executado o push de "origin" para "master", neste caso o comando poderia ser somente -> git push -> PARA MANTER MAIOR CONTROLE será usado o comando -> git push origin master -> a saída do console deve ser:
*******************************************************************************
Username for 'https://github.com': HaguenMcLeod
Password for 'https://HaguenMcLeod@github.com': 
Counting objects: 6, done.
Delta compression using up to 12 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (6/6), 648 bytes | 648.00 KiB/s, done.
Total 6 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/HaguenMcLeod/alura-git.git
 * [new branch]      master -> master
*******************************************************************************
-> Ao atualizar a página do git o conteúdo da pasta Vinicius deve aparecer ####
-> Na página do Git deverá ser possível visualizar todo o histórico ###########
do arquivo submetido ##########################################################
-> Exercício abaixo:
1) Crie uma pasta nova eu seu computador;
2) No terminal (ou Git Bash, no Windows) navegue até a pasta recém criada (utilize o comando cd para navegar entre pastas);
3) Execute o comando git init --bare;
4) Navegue até a pasta onde se encontra o seu projeto;
5) Execute o comando git remote add local {caminho}. Substitua {caminho} pelo caminho completo da pasta recém criada;

-> git commit -m "initial commit"

6) Crie uma nova pasta em seu computador, para representar o trabalho de outra pessoa;
7) No terminal (ou Git Bash, no Windows) navegue até a pasta recém criada;
8) Execute o comando git clone {caminho} projeto. Substitua {caminho} pelo caminho completo da pasta que criamos no primeiro passo;
9) Observe que o repositório clonado está vazio;
10) Execute o comando 'git remote rename origin local' para renomear o repositório local da outra pessoa de "origin" para "local";
11) Navegue até a pasta onde se encontra o seu projeto original - a pasta que contém a "primeira"pasta criada para o projeto;
12) Execute o comando git push local master para enviar as suas modificações para o seu servidor;
13) Navegue até a pasta criada no passo 6;
14) Execute o comando git pull local master para baixar as modificações;
15) Abra o seu navegador e acesse http://github.com/;
16) Crie uma conta;
17) Crie um novo repositório, clicando no símbolo de adição no canto superior direito;
18) No terminal (ou Git Bash, no Windows) adicione, ao seu projeto inicial, o repositório remoto recém criado (os comandos são mostrados pelo próprio GitHub);
19) Execute git push origin master para enviar as suas alterações para o repositório no GitHub.
-> Comandos para versionamento na página do próprio Git:
*******************************************************************************
…or create a new repository on the command line

echo "# repo006" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/HaguenMcLeod/aluraCursoBackupCodigosEImpressos
.git
git push -u origin master

…or push an existing repository from the command line

git remote add origin https://github.com/HaguenMcLeod/aluraCursoBackupCodigosEImpressos
.git
git push -u origin master

git push -u origin https://github.com/HaguenMcLeod/aluraCursoBackupCodigosEImpressos.git
*******************************************************************************
-> Deletar repositório no Git -> Entrar no repositório -> #####################
Aba Settings -> Delete ########################################################
Branches - 15/10/2019 #########################################################
-> para ver o branch atual -> git branch
-> criar branch -> git novo branch -> agora se digitar -> git branch vão aparecer master e novo branch
-> trocar do branch master para novo branch -> git checkout novo branch
-> Ferramenta para visualização gráfica do Git -> #############################
http://git-school.github.io/visualizing-git/ -> para usar a ferramenta ########
digitar os comandos dentro do console da própria ferramenta ###################
-> criar um segundo branch já trocando para uso do mesmo -> 
comando resumido -> git checkout -b segundo branch -> 
comando completo -> git branch segundo branch + git checkout segundo branch também funcionaria -> agora existem 3 branches -> "master", "novo branch" e "segundo branch"
###############################################################################
03 Unindo o trabalho - Docker
-> Unir branches -> Se estiver no branch master, considerar a modificação concluída e quiser unir com o segundo branch que também estiver com trabalho concluído -> git merge segundo branch (o branch master vai receber os dados do segundo branch) -> Será exibida msg para confirmação do commit de merge
-> Mover commits para dentro da branch master -> 
Atualizando a branch - 16/10/2019 #############################################
-> Atualizar branch master com commits dos outros branchs -> 
-> O merge junta os trabalhos e gera um merge commit. O rebase aplica os commits de outra branch na branch atual. #################################################
-> git rebase "outro branch" -> pega os commits de "outro branch" e junta no branch master, o branch que recebe o rebase fica com sua versão como a última ########
-> git log --graph -> exibi lista de commits com grafico simples
-> E se houverem duas modificações no mesmo arquivo para serem versionadas ? 
